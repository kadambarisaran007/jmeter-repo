<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Compare count and data between mdm_client and client_masterdata" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compare count between mdm_client and client_masterdata and source" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1524490690000</longProp>
        <longProp name="ThreadGroup.end_time">1524490690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon IDESK Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@NY-RAC-NPRDEE01.NA.RTDOM.NET:1521/prsmqa2_d</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">IDESK_DATA</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">IDESK_DATA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon MDM Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@NY-RAC-NPRDEE01.NA.RTDOM.NET:1521/prsmqa2_d</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">PHOTON_MDM_RO</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PHOTON_MDM_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="SPECTRA OX Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnOX</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-ox-db01:1521:ipgstag</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">readonly</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">readonly</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Threads" elementType="Argument">
              <stringProp name="Argument.name">Threads</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-CLIENT-COUNT-OX" enabled="true">
          <stringProp name="dataSource">dbconnOX</stringProp>
          <stringProp name="query">SELECT COUNT(*) FROM(select	
	aj.client_id,
	aj.name,
	aj.primary_loc_id,
	ul.loc_name,
	aj.short_name,
	to_char( to_date(to_char(aj.last_mod_date,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;),
	decode(substr(aj.dt_reserved2,5,1),&apos;Y&apos;,1,0) as status,
	null as location_id,
	null as created_date,
	decode(substr(aj.dt_reserved2,17,1),&apos;Y&apos;,&apos;1&apos;,&apos;0&apos;) as is_dual_cost_enabled,
	null as medium_code,
	null as zone,
	&apos;CMDW&apos; as extract_key,
	null as bill_currency,
    CASE
    WHEN SUBSTR(aj.DT_RESERVED2,5,1) = &apos;Y&apos; THEN &apos;L&apos;
    ELSE &apos;D&apos;
    END as last_action,
	&apos; &apos; as media_code
from analog.jl_client aj
join analog.ut_locparm ul on aj.primary_loc_id=ul.loc_id)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSourceOX</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-MDM-XMEDIA-CLIENT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">SELECT COUNT(*) FROM XMEDIA_CLIENT WHERE AGENCY_ALPHA=&apos;IPG&apos;and last_action != &apos;D&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countXmediaClient</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Assertion- Validate Count_MDM-OX_IPG" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countSourceOX_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countXmediaClient_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}

		


</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-IDESK-MDM-CLIENT" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from mdm_client where alpha_code=&apos;IPG&apos; and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;) AND BUY_SYSTEM_ID=3 AND BUSINESS_KEY LIKE &apos;OX|IPG%&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDMClient</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Assertion- Validate Count_MDM-CLIENT-AND-CLIENT-MASTERDATA" enabled="true">
          <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countMDMClient_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countClientMasterdata_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}

		


</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
        </BeanShellAssertion>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-IDESK-CLIENT-MASTERDATA" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from client_masterdata where alpha_code=&apos;IPG&apos; and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;) AND BUY_SYSTEM_ID=3 AND BUSINESS_KEY LIKE &apos;OX|IPG%&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countClientMasterdata</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-XMEDIA-CLIENT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">SELECT count(*) FROM XMEDIA_CLIENT_media_mapping xc join xmedia_client c on xc.CLIENT_MEDIAOCEAN_ID=c.MEDIAOCEAN_ID where xc.mediaocean_id like &apos;OX|IPG%&apos;and c.LAST_ACTION!=&apos;D&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countXmediaClient</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Assertion- Validate Count_MDM-CLIENT-AND-XMEDIA-CLIENT" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countMDMClient_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countXmediaClient_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}

		


</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compare count between mdm_product and product_masterdata and source" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1524490690000</longProp>
        <longProp name="ThreadGroup.end_time">1524490690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon IDESK Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@NY-RAC-NPRDEE01.NA.RTDOM.NET:1521/prsmqa2_d</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">IDESK_DATA</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">IDESK_DATA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon MDM Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@NY-RAC-NPRDEE01.NA.RTDOM.NET:1521/prsmqa2_d</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">PHOTON_MDM_RO</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PHOTON_MDM_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="SPECTRA OX Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnOX</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-ox-db01:1521:ipgstag</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">readonly</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">readonly</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Threads" elementType="Argument">
              <stringProp name="Argument.name">Threads</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-PRODUCT-COUNT-OX" enabled="true">
          <stringProp name="dataSource">dbconnOX</stringProp>
          <stringProp name="query">select count(*) from (select 
	&apos;&lt;agencyId&gt;&apos; as agency_id, 
	d.divis_id,
	d.client_id,
	d.name, 
	to_char(to_date(to_char(d.last_mod_date,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;), 
	decode(substr(c.dt_reserved2,5,1),&apos;Y&apos;,1,0) as status,
	c.name as client_name,
	null as created_date,
	NULL as medium_code,
	&apos;CMDW&apos; as extract_key,
	d.short_name as short_name,
	&apos;L&apos; as last_action,
	&apos; &apos;
from analog.jl_divis d
join analog.jl_client c on c.client_id = d.client_id)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSourceOXProduct</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-MDM-XMEDIA-PRODUCT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select COUNT(*) from xmedia_product where agency_alpha=&apos;IPG&apos;  and last_action &lt;&gt;&apos;D&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countXmediaProduct</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Assertion- Validate Count_MDM-OX_ipg" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countSourceOXProduct_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countXmediaProduct_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}

		


</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-IDESK-MDM-PRODUCT" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from mdm_product where last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;) and client_business_key in (select business_key from mdm_client where alpha_code=&apos;IPG&apos; and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;))</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDMProduct</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-IDESK-PRODUCT-MASTERDATA" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from product_masterdata where client_business_key in (select business_key from client_masterdata where alpha_code=&apos;IPG&apos; and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;) and buy_system_id=3 and business_key like &apos;OX|IPG%&apos;) and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countProductMasterdata</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Assertion- Validate Count_MDM-CLIENT-AND-CLIENT-MASTERDATA" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countMDMProduct_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countProductMasterdata_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}

		


</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-XMEDIA-PRODUCT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">SELECT count(*) FROM XMEDIA_PRODUCT XP JOIN XMEDIA_PRODUCT_MEDIA_MAPPING XPMM on XP.MEDIAOCEAN_ID = XPMM.PRODUCT_MEDIAOCEAN_ID WHERE BUY_SYSTEM=&apos;OX&apos; AND AGENCY_ALPHA=&apos;IPG&apos;and last_action&lt;&gt;&apos;D&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countXmediaProduct</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Assertion- Validate Count_MDM-CLIENT-AND-CLIENT-MASTERDATA" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countMDMProduct_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countXmediaProduct_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}

		


</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compare count between mdm_estimate and estimate_masterdata and source" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1524490690000</longProp>
        <longProp name="ThreadGroup.end_time">1524490690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon IDESK Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@NY-RAC-NPRDEE01.NA.RTDOM.NET:1521/prsmqa2_d</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">IDESK_DATA</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">IDESK_DATA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon MDM Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@NY-RAC-NPRDEE01.NA.RTDOM.NET:1521/prsmqa2_d</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">PHOTON_MDM_RO</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PHOTON_MDM_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="SPECTRA OX Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnOX</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-ox-db01:1521:ipgstag</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">readonly</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">readonly</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Threads" elementType="Argument">
              <stringProp name="Argument.name">Threads</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-ESTIMATE-COUNT-OX" enabled="true">
          <stringProp name="dataSource">dbconnOX</stringProp>
          <stringProp name="query">select count(*) from (select
	&apos;&lt;agencyId&gt;&apos; as agency_id,
	e.client_id,
  b.divis_id as product_code,
  NULL as media_code,
  e.est_code as est_code,
	e.name,
	to_char( to_date(to_char(e.start_date,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;),
	to_char( to_date(to_char(e.end_date,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;),
  &apos;N&apos; as system_code,
  c.last_mod_user_id,
	to_char( to_date(to_char(e.approval_date,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;) as last_mod_date,
	--status? -from client
	decode(substr(c.dt_reserved2,5,1),&apos;Y&apos;,1,0) as status,
	null as name2,
	null as short_name,
	null as agency_location_id,
	null as created_date,
	null as medium_code,
	&apos;CMDW&apos; as extract_key,
	null as transparency_id,
	null as original_campaign_id,
	&apos;L&apos; as last_action,
	to_char(e.byear),
	e.cost_entry_g_type as cost_type,
	null as owr,
	trim(substr(demo_list,2,6)) as demo_category,
	coalesce(trim(substr(demo_list,1,1)),&apos; &apos;) as modifier,
	&apos; &apos; as user_start_date
from analog.ne_estimate e
join analog.ne_esumbrnd b
	on e.est_uniq_num=b.est_uniq_num
    and e.est_code=b.est_code
    and b.loc_id=e.loc_id
join analog.jl_client c
 	on b.client_id = c.client_id
 	and e.loc_id = c.primary_loc_id
where (to_char(e.last_mod_date,&apos;DD-MON-YY&apos;)=&apos;31-DEC-00&apos; OR (E.LAST_MOD_DATE IS NULL AND 0=0))
 or to_char(to_date(to_char(e.last_mod_date+1,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;YYYY-MM-DD&apos;) &gt;= to_char(to_date(&apos;1970-01-01&apos;, &apos;YYYY-MM-DD&apos;) + 1/86400 * 0,&apos;YYYY-MM-DD&apos;)
union
select
	&apos;&lt;agencyId&gt;&apos; as agency_id,
	e.client_id,
  e.divis_id as product_code,
  to_char(e.media_type),
  to_char(e.est_num) as est_num,
	job.name as estimate_name,
	to_char( to_date(to_char(e.start_cdate,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;),
	to_char( to_date(to_char(e.end_cdate,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;),
  &apos;P&apos; as system_code,
  e.lmod_user_id,
	to_char( to_date(to_char(e.lmod_cdate,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;),

	decode(substr(c.dt_reserved2,5,1),&apos;Y&apos;,1,0) as status,
	null as name2,
	null as short_name,
	null as agency_location_id,
	to_char(to_date(to_char(e.lmod_cdate,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;) as created_date,
	null as medium_code,
	&apos;CMDW&apos; as extract_key,
	null as transparency_id,
	null as original_campaign_id,
	&apos;L&apos; as last_action,
	null as byear,
	null as cost_type,
	null as owr,
	null as demo_category,
	null as modifier,
	&apos; &apos; as user_start_date
FROM ANALOG.PM_PMEST e
left join ANALOG.JL_JOB JOB
on e.LOC_ID = JOB.LOC_ID
AND e.JOB_ID   = JOB.JOB_ID
AND e.JOB_TYPE   = JOB.JOB_TYPE
join analog.jl_client c
on c.client_id=e.client_id
and e.loc_id = c.primary_loc_id
where (to_char(to_date(to_char(coalesce(e.lmod_cdate,sysdate)+1,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;YYYY-MM-DD&apos;) &gt;= to_char(to_date(&apos;1970-01-01&apos;, &apos;YYYY-MM-DD&apos;) + 1/86400 * 0,&apos;YYYY-MM-DD&apos;)
or to_char(to_date(to_char(coalesce(c.last_mod_date,sysdate)+1,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;YYYY-MM-DD&apos;) &gt;= to_char(to_date(&apos;1970-01-01&apos;, &apos;YYYY-MM-DD&apos;) + 1/86400 * 0,&apos;YYYY-MM-DD&apos;)
or to_char(to_date(to_char(coalesce(e.cdate,sysdate)+1,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;YYYY-MM-DD&apos;) &gt;= to_char(to_date(&apos;1970-01-01&apos;, &apos;YYYY-MM-DD&apos;) + 1/86400 * 0,&apos;YYYY-MM-DD&apos;))
union
select
	&apos;&lt;agencyId&gt;&apos; as agency_id,
	e.client_id,
  sb.divis_id,
  e.media_type,
  to_char(e.est_num) as est_num,
	e.name,
	to_char( to_date(to_char(e.start_date,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;),
	to_char( to_date(to_char(e.end_date,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;),
    &apos;S&apos; as system_code,
    e.lmod_by,
	to_char( to_date(to_char(e.lmod_rpg,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;),
	--status? - from client
	decode(substr(c.dt_reserved2,5,1),&apos;Y&apos;,1,0) as status,
	null as name2,
	to_char(e.est_num) as short_name,
	null as agency_location_id,
	to_char(to_date(to_char(e.lmod_rpg,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;) as created_date,--captured in load
	null as medium_code,
	&apos;CMDW&apos; as extract_key,
	null as transparency_id,
	null as original_campaign_id,
	&apos;L&apos; as last_action,
	null as byear,
	e.cost_entry_g_type as cost_type,
	e.day_of_week as owr,
	trim(e.demo_id_1) as demo_category,
	coalesce(e.demo_type_1,&apos; &apos;) as modifier,
	to_char(to_date(to_char(e.user_start_date,&apos;MM-DD-YY&apos;),&apos;MM-DD-YY&apos;),&apos;MM-DD-YYYY hh24:mi:ss&apos;) as user_start_date
from analog.sp_superest e
join analog.jl_client c
on c.client_id=e.client_id
and e.loc_id = c.primary_loc_id
join analog.sp_brandest sb
  on sb.est_uniq_num = e.est_uniq_num)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSourceOXEstimate</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-MDM-XMEDIA-ESTIMATE" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_estimate where agency_alpha=&apos;IPG&apos; and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countXmediaESTIMATE</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Assertion- Validate Count_MDM-OX_ipg" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countSourceOXEstimate_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countXmediaESTIMATE_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}

		


</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-IDESK-MDM-ESTIMATE" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from mdm_estimate where product_business_key in ( select business_key from mdm_product where client_business_key in (select business_key from mdm_client where alpha_code=&apos;IPG&apos; and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;) and buy_system_id=3 and business_key like &apos;OX|IPG%&apos;) and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;) and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;))AND LAST_ACTION &lt;&gt; &apos;D&apos; and business_key like &apos;OX|IPG%&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDMEstimate</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Assertion- Validate Count_MDM-ESTIMATE-AND-XMEDIA-ESTIMATE" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countMDMEstimate_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countXmediaESTIMATE_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}

		


</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-IDESK-ESTIMATE-MASTERDATA" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from estimate_masterdata where product_business_key in (select business_key from product_masterdata where client_business_key in (select business_key from client_masterdata where alpha_code=&apos;IPG&apos; and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;) and buy_system_id=3 and business_key like &apos;OX|IPG%&apos;) and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;) and last_action in (&apos;L&apos;,&apos;A&apos;,&apos;C&apos;))AND LAST_ACTION &lt;&gt; &apos;D&apos; and business_key like &apos;OX|IPG%&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countEstimateMasterdata</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Assertion- Validate Count_MDM-ESTIMATE-AND-ESTIMATE-MASTERDATA" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countMDMEstimate_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countEstimateMasterdata_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}

		


</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-COUNT-XMEDIA-PRODUCT" enabled="false">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">SELECT count(*) FROM XMEDIA_PRODUCT XP JOIN XMEDIA_PRODUCT_MEDIA_MAPPING XPMM on XP.MEDIAOCEAN_ID = XPMM.PRODUCT_MEDIAOCEAN_ID WHERE BUY_SYSTEM=&apos;OX&apos; AND AGENCY_ALPHA=&apos;IPG&apos;and last_action&lt;&gt;&apos;D&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countXmediaProduct</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
