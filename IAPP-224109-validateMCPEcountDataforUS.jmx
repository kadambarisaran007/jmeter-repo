<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="IAPP-224109_ComapreDataCountAccrossUSandMDM" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compare US data count for client" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1524490690000</longProp>
        <longProp name="ThreadGroup.end_time">1524490690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="HARP DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://st-mssql-02:14020;databasename=PrismaMaster_CSC_NA</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Medi@_Master_r0prD</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">media_master_ro </stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon MDM Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">SELECT 1 FROM DUAL</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-rac-nprd1.na.rtdom.net:1521/PRSMPDT</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">PHOTON_MDM_RO</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PHOTON_MDM_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon IDESK Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">SELECT 1 FROM DUAL</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-rac-nprd1.na.rtdom.net:1521/PRSMPDT</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">IDESK_RO</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">IDESK_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Client-Count-from-Source-PRINT" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*) from PPSCLIENT
where agency=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countPrintSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Client-Count-from-MDM-PRINT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_client
where agency_alpha=&apos;SJ&apos;
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;P&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countPrintMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countPrintSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countPrintMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Client-Count-from-Source-NET" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*)
from NESCLIENT 
where AGENCY=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countNetSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Client-Count-from-MDM-NET" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_client
where agency_alpha=&apos;SJ&apos; 
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;N&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countNetMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countNetSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countNetMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Client-Count-from-Source-SPOT" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*)
from SPSCLIENT
where AGENCY=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSpotSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Client-Count-from-MDM-SPOT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_client
where agency_alpha=&apos;SJ&apos;
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;S&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSpotMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countSpotSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countSpotMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Client-Count-from-IDESK" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from mdm_client where alpha_code=&apos;SJ&apos; and last_action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countIDESK</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countIDESK_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countPrintMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Client-Count-from-IDESK-CLIENT_MASTERDATA" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from client_masterdata where alpha_code=&apos;SJ&apos; and medium_code is null and media_type=&apos;I&apos; and last_action=&apos;L&apos; and buy_system_id=1 order by code asc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMASTERDATA</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countIDESK_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countMASTERDATA_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Client-Count-from-IDESK-MDM" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from xmedia_client where agency_alpha = &apos;SJ&apos; and last_action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countIDESK_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compare US data count for product" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1524490690000</longProp>
        <longProp name="ThreadGroup.end_time">1524490690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="HARP DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://st-mssql-02:14020;databasename=PrismaMaster_CSC_NA</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Medi@_Master_r0prD</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">media_master_ro </stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon MDM Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">SELECT 1 FROM DUAL</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-rac-nprd1.na.rtdom.net:1521/PRSMPDT</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">PHOTON_MDM_RO</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PHOTON_MDM_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon IDESK Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">SELECT 1 FROM DUAL</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-rac-nprd1.na.rtdom.net:1521/PRSMPDT</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">IDESK_RO</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">IDESK_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-Prouct-Count-from-Source-PRINT" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*) from PPSPRODUCT
where agency=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countPrintSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-PRODUCT-Count-from-MDM-PRINT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_product
where agency_alpha=&apos;SJ&apos;
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;P&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countPrintMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countPrintSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countPrintMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-PRODUCT-Count-from-Source-NET" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*)
from NESPRODUCT
where AGENCY=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countNetSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-PRODUCT-Count-from-MDM-NET" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_product
where agency_alpha=&apos;SJ&apos;
and last_action in (&apos;L&apos;,&apos;A&apos;) 
and system_code=&apos;N&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countNetMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countNetSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countNetMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-PRODUCT-Count-from-Source-SPOT" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*)
from SPSPRODUCT
where AGENCY=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSpotSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-PRODUCT-Count-from-MDM-SPOT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_product
where agency_alpha=&apos;SJ&apos;
and last_action in (&apos;L&apos;,&apos;A&apos;) 
and system_code=&apos;S&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSpotMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countSpotSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countSpotMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-PRODUCT-Count-from-MDM" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_product where agency_alpha = &apos;SJ&apos; and last_action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-PRODUCT-Count-from-IDESK" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from mdm_product where last_action in (&apos;L&apos;,&apos;A&apos;) and client_business_key in (select business_key from mdm_client where alpha_code=&apos;SJ&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countIDESK</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countIDESK_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-PRODUCT-Count-from-MDM-PRODUCT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from mdm_product where client_business_key in (select business_key from mdm_client where alpha_code=&apos;SJ&apos; and medium_code is null and media_type=&apos;I&apos; and last_action=&apos;L&apos; and buy_system_id=1) and last_action=&apos;L&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-PRODUCT-Count-from-IDESK-MASTERDATA" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from product_masterdata where client_business_key in (select business_key from client_masterdata where alpha_code=&apos;SJ&apos; and medium_code is null and media_type=&apos;I&apos; and last_action=&apos;L&apos; and buy_system_id=1) and last_action=&apos;L&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countIDESK</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countIDESK_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compare US data count for estimate" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1524490690000</longProp>
        <longProp name="ThreadGroup.end_time">1524490690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="HARP DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://st-mssql-02:14020;databasename=PrismaMaster_CSC_NA</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Medi@_Master_r0prD</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">media_master_ro </stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon MDM Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">SELECT 1 FROM DUAL</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-rac-nprd1.na.rtdom.net:1521/PRSMPDT_D</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">PHOTON_MDM_RO</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PHOTON_MDM_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon IDESK Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">SELECT 1 FROM DUAL</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-rac-nprd1.na.rtdom.net:1521/PRSMPDT</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">IDESK_RO</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">IDESK_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="getMarketBySubMedia" elementType="Argument">
              <stringProp name="Argument.name">getMarketBySubMedia</stringProp>
              <stringProp name="Argument.value">prv.aos.devbrny.dds.net/prisma-masterdata-service/media/marketplace</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Threads" elementType="Argument">
              <stringProp name="Argument.name">Threads</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MDM_buy_system" elementType="Argument">
              <stringProp name="Argument.name">MDM_buy_system</stringProp>
              <stringProp name="Argument.value">MDM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-Source-PRINT" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*) from PPSESTIMATE
where agency=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countPrintSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-MDM-PRINT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_estimate
where agency_alpha=&apos;SJ&apos;
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;P&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countPrintMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countPrintSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countPrintMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-Source-NET" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*)
from NESESTIMATE
where AGENCY=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countNetSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-MDM-NET" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_estimate
where agency_alpha=&apos;SJ&apos; 
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;N&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countNetMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countNetSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countNetMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-Source-SPOT" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*)
from SPSESTIMATE
where AGENCY=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSpotSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-MDM-SPOT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_estimate
where agency_alpha=&apos;SJ&apos; 
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;S&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSpotMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countSpotSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countSpotMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-IDESK-MDM-ESTIMATE" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from mdm_estimate where last_action in (&apos;L&apos;,&apos;A&apos;) and product_business_key in (select business_key from mdm_product where client_business_key in (select business_key from mdm_client where alpha_code=&apos;SJ&apos;))</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countIDESK</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-MDM-XMEDIA-ESTIMATE" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_estimate where agency_alpha = &apos;SJ&apos; and last_action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countIDESK_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-IDESK-ESTIMATE-MASTERDATA" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from estimate_masterdata where product_business_key in (select business_key from product_masterdata where last_action=&apos;L&apos; and client_business_key in (select business_key from client_masterdata where alpha_code=&apos;SJ&apos; and medium_code is null and media_type=&apos;I&apos; and last_action=&apos;L&apos; and buy_system_id=1)) and last_action=&apos;L&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countIDESK</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-ESTIMATE-Count-from-MDM-ESTIMATE" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from mdm_estimate where product_business_key in ( select business_key from mdm_product where last_action=&apos;L&apos; and client_business_key in (select business_key from mdm_client where alpha_code=&apos;SJ&apos; and medium_code is null and media_type=&apos;I&apos; and last_action=&apos;L&apos; and buy_system_id=1)) and last_action=&apos;L&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countIDESK_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compare US data count for supplier" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1524490690000</longProp>
        <longProp name="ThreadGroup.end_time">1524490690000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="HARP DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://st-mssql-02:14020;databasename=PrismaMaster_CSC_NA</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Medi@_Master_r0prD</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">media_master_ro </stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon MDM Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">SELECT 1 FROM DUAL</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@NY-RAC-NPRD1.NA.RTDOM.NET:1521/PRSMPDT_D</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">PHOTON_MDM_RO</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PHOTON_MDM_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PRSMQA2 Photon IDESK Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">SELECT 1 FROM DUAL</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@ny-rac-nprd1.na.rtdom.net:1521/PRSMPDT</stringProp>
          <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">IDESK_RO</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">IDESK_RO</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-Source-PRINT" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*) from PPSPUB
where agency=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countPrintSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-MDM-PRINT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_supplier
where agency_alpha=&apos;SJ&apos;
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;P&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countPrintMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countPrintSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countPrintMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-Source-NET" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*)
from NESNETWORK
where AGENCY=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countNetSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-MDM-NET" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_supplier
where agency_alpha=&apos;SJ&apos;
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;N&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countNetMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countNetSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countNetMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-Source-SPOT" enabled="true">
          <stringProp name="dataSource">dbconnHarp</stringProp>
          <stringProp name="query">select count(*)
from SPSESTIMATE
where AGENCY=&apos;SJ&apos;
and action in (&apos;L&apos;,&apos;A&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSpotSource</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-MDM-SPOT" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_supplier
where agency_alpha=&apos;SJ&apos;
and last_action in (&apos;L&apos;,&apos;A&apos;)
and system_code=&apos;S&apos;
order by supplier_code asc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countSpotMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countSpotSource_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countSpotMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-IDESK-SUPPLIER" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from mdm_supplier where alpha_code=&apos;SJ&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countIDESK</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-MDM-XMEDIA" enabled="true">
          <stringProp name="dataSource">dbconnMDM</stringProp>
          <stringProp name="query">select count(*) from xmedia_supplier where agency_alpha = &apos;SJ&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countIDESK_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-IDESK-SUPPLIER-MASTERDATA" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from supplier_masterdata where alpha_code=&apos;SJ&apos; and business_key like &apos;USSJI%&apos; and media_type=&apos;I&apos; and last_action=&apos;L&apos; and buy_system_id=1 order by code asc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countIDESK</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query-Get-SUPPLIER-Count-from-IDESK-MDM-SUPPLIER" enabled="true">
          <stringProp name="dataSource">dbconnIDESK</stringProp>
          <stringProp name="query">select count(*) from mdm_supplier where alpha_code=&apos;SJ&apos; and medium_code is null and media_type=&apos;I&apos; and last_action=&apos;L&apos; and buy_system_id=1 order by code asc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">countMDM</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">int oxcount = Integer.parseInt(vars.get(&quot;countIDESK_&quot;+1));
int mdmcount = Integer.parseInt(vars.get(&quot;countMDM_&quot;+1));
print(&quot;********************************Compare Client details*************************************&quot;);
print(&quot;Count of records from OX is &quot;+oxcount);
print(&quot;Count of records from MDM is &quot;+mdmcount);

if(oxcount == 0 || mdmcount ==0)
				{
				Failure = true;			    
				FailureMessage=&quot;Failure - One of the system returns 0 records, please check DB connections...&quot;;
				print(FailureMessage);
				
				}
	else 	if(oxcount != mdmcount){
				Failure = true;			    
				FailureMessage=&quot;Failure - Count of records returned from both the Databases i.e. MDM and OX is unequal&quot;;
				print(FailureMessage);
	      }
		else{
				print(&quot;Count of records returned from both the Databases i.e. MDM and OX is exact same&quot;);
				
		}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
